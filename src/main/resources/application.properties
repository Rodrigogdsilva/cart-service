spring.application.name=cart-service


# --- Configuracao do Servidor ---
server.port=8082

# --- Conexao com o Redis ---
spring.data.redis.host=redis
spring.data.redis.port=6379

# --- Configuracao de Comunicacao entre Microsservicos ---
service.auth.url=http://auth-app:8081/auth/validate
service.product.url=http://product-service:8083

# Chave de API secreta para comunicacao interna
service.internal.api-key=${INTERNAL_API_KEY}

# --- Configuracao do Resilience4j Circuit Breaker ---

# Nome da instância do Circuit Breaker
resilience4j.circuitbreaker.instances.productService.register-health-indicator=true

# Configura o disjuntor para abrir após 50% de falhas
resilience4j.circuitbreaker.instances.productService.failure-rate-threshold=50

# O disjuntor considera as últimas 10 chamadas para calcular a taxa de falha
resilience4j.circuitbreaker.instances.productService.minimum-number-of-calls=10

# Duração em que o disjuntor permanece aberto antes de tentar fechar novamente (10 segundos)
resilience4j.circuitbreaker.instances.productService.wait-duration-in-open-state=10s

# Número de chamadas permitidas no estado "meio-aberto"
resilience4j.circuitbreaker.instances.productService.permitted-number-of-calls-in-half-open-state=3

# Tamanho do buffer circular no estado fechado
resilience4j.circuitbreaker.instances.productService.sliding-window-size=20
resilience4j.circuitbreaker.instances.productService.sliding-window-type=COUNT_BASED

# --- Configuracao do Spring Boot Actuator ---

# Expõe os endpoints de health e info via HTTP
management.endpoints.web.exposure.include=health,info,metrics,prometheus

# Mostra detalhes completos no endpoint de health (status do Redis, etc.)
management.endpoint.health.show-details=always